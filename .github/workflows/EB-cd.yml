# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew
      shell: bash

    - name: Build with Gradle
      run: ./gradlew clean build --exclude-task test
      shell: bash
        
    - name: Get current time
      uses: josStorer/get-current-time@v2.0.0
      id: current-time
      with:
        format: YYYY-MM-DDTHH-mm-ss # 다른 포맷으로 변경 가능
        utcOffset: "+09:00" ## 한국시간에 맞추기 위함        
    
    # Gradle build를 통해 만들어진 JAR를 beanstalk에 배포하기 위한 ZIP 파일로 만드는 것
    - name: Generate deployment package
      run: |
        mkdir -p deploy
        cp build/libs/application.war deploy/application.war  # 빌드 완료 시 .war 파일 복붙
        cp Procfile deploy/Procfile
        cp -r .ebextensions deploy/.ebextensions
        cp -r .platform deploy/.platform
        cd deploy && zip -r deploy.zip . # Procfile, .ebextensions, .playform 포함하여 zip 생성

    
    - name: Beanstalk Deploy
      # You may pin to the exact commit or the version.
      # uses: einaregilsson/beanstalk-deploy@6f594ded1b0a22c5e5aa1088e7c58dc5816c92ea
      uses: einaregilsson/beanstalk-deploy@v20
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        # AWS Region
        region: ap-northeast-2
        # Beanstalk application name
        application_name: ren2u-dev
        # Beanstalk environment name. If empty a version will be created but not deployed anywhere.
        environment_name: ren2u-dev
        # Version label for new Beanstalk version
        version_label: Github Action-${{steps.current-time.outputs.formattedTime}}
        # Version description for the new Beanstalk version
#         version_description: # optional
        # Zip file with the version to deploy. If skipped the action will deploy existing version.
        deployment_package: deploy/deploy.zip
        # Whether the action should skip creating a new bucket and use the given one to upload the deployment package to instead. When omitted the actions will (try to) create a new one during deployment.
#         existing_bucket_name: # optional
        # If set to "true" then the action will deploy an existing version with the given version_label if it already exists, but otherwise create the version and deploy it. If set to true for an action with no environment name it will upload a version if it does not exist already, but do nothing if the version already exists.
#         use_existing_version_if_available: # optional
        # Whether the action should wait for the deployment to finish and log status messages during the wait. Default is "true". If set to "false" the action will start the deployment on Beanstalk and then exit.
#         wait_for_deployment: # optional
        # How many seconds to wait for the environment to return to Green state after deployment is finished. Default is 30 seconds.
        wait_for_environment_recovery: 180
